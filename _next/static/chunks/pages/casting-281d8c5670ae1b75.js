(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[341],{6896:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/casting",function(){return o(7331)}])},7331:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r}});var t=o(5893),a=o(1151);function e(s){let n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",a:"a",pre:"pre"},(0,a.ah)(),s.components),{Note:o,CodeGroup:e}=n;return e||l("CodeGroup",!0),o||l("Note",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Casting"}),"\n",(0,t.jsx)(n.p,{children:"The tools library provides custom casting methods that expand Pinescript's casting\ncapabilities for boolean, float, integer, string, and color object types."}),"\n",(0,t.jsx)(o,{children:(0,t.jsxs)(n.p,{children:["For all the examples in this page, ",(0,t.jsx)(n.code,{children:"tools"})," is used as a namespace for the tools library.\nIf you are following along with the examples, please make sure to import the latest\nversion of the library in your script first, and assign ",(0,t.jsx)(n.code,{children:"tools"})," as namespace."]})}),"\n",(0,t.jsx)(n.h2,{id:"boolean",children:"Boolean"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/cast#bool",children:(0,t.jsx)(n.code,{children:"_bool()"})})," method extends the functionality of the ",(0,t.jsx)(n.code,{children:"bool()"})," function in Pinescript,\nallowing the conversion of string, integer, and float values to boolean values."]}),"\n",(0,t.jsxs)(e,{children:[(0,t.jsx)(n.pre,{language:"js",code:'// Values that returns false\n\n"".tools._bool()          // empty string.\n0.tools._bool()           // literal 0 value.\n0.0.tools._bool()         // float 0.\n"0".tools._bool()         // string "0".\n"no".tools._bool()        // string "no"  (letter casing doesn\'t matter).\n"na".tools._bool()        // string "na"  (letter casing doesn\'t matter).\n"NaN".tools._bool()       // string "nan" (letter casing doesn\'t matter).\n\n// Values that returns true\n\n"non-empty".tools._bool() // any non-empty string (other than 0, no, na, nan).\n100.tools._bool()         // any float or integer value other than 0.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Values that returns false</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// empty string.</span></span>\n<span><span style="color: var(--shiki-color-text)">0.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()           </span><span style="color: var(--shiki-token-comment)">// literal 0 value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">0.0</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()         </span><span style="color: var(--shiki-token-comment)">// float 0.</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;0&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()         </span><span style="color: var(--shiki-token-comment)">// string &quot;0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;no&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()        </span><span style="color: var(--shiki-token-comment)">// string &quot;no&quot;  (letter casing doesn&#39;t matter).</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;na&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()        </span><span style="color: var(--shiki-token-comment)">// string &quot;na&quot;  (letter casing doesn&#39;t matter).</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;NaN&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()       </span><span style="color: var(--shiki-token-comment)">// string &quot;nan&quot; (letter casing doesn&#39;t matter).</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Values that returns true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;non-empty&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// any non-empty string (other than 0, no, na, nan).</span></span>\n<span><span style="color: var(--shiki-color-text)">100.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">()         </span><span style="color: var(--shiki-token-comment)">// any float or integer value other than 0.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(n.pre,{language:"js",code:'// Values that returns false\n\ntools._bool("")           // empty string.\ntools._bool(0)            // literal 0 value.\ntools._bool(0.0)          // float 0.\ntools._bool("0")          // string "0".\ntools._bool("no")         // string "no"  (letter casing doesn\'t matter).\ntools._bool("na")         // string "na"  (letter casing doesn\'t matter).\ntools._bool("NaN")        // string "nan" (letter casing doesn\'t matter).\n\n// Values that returns true\n\ntools._bool("non-empty")  // any non-empty string (other than 0, no, na, nan).\ntools._bool(100)          // any float or integer value other than 0.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Values that returns false</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)           </span><span style="color: var(--shiki-token-comment)">// empty string.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)            </span><span style="color: var(--shiki-token-comment)">// literal 0 value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0.0</span><span style="color: var(--shiki-color-text)">)          </span><span style="color: var(--shiki-token-comment)">// float 0.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;0&quot;</span><span style="color: var(--shiki-color-text)">)          </span><span style="color: var(--shiki-token-comment)">// string &quot;0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;no&quot;</span><span style="color: var(--shiki-color-text)">)         </span><span style="color: var(--shiki-token-comment)">// string &quot;no&quot;  (letter casing doesn&#39;t matter).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;na&quot;</span><span style="color: var(--shiki-color-text)">)         </span><span style="color: var(--shiki-token-comment)">// string &quot;na&quot;  (letter casing doesn&#39;t matter).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;NaN&quot;</span><span style="color: var(--shiki-color-text)">)        </span><span style="color: var(--shiki-token-comment)">// string &quot;nan&quot; (letter casing doesn&#39;t matter).</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Values that returns true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;non-empty&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// any non-empty string (other than 0, no, na, nan).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._bool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-color-text)">)          </span><span style="color: var(--shiki-token-comment)">// any float or integer value other than 0.</span></span>\n<span></span>'}),title:"Function"})]}),"\n",(0,t.jsx)(n.h2,{id:"float",children:"Float"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/cast#float",children:(0,t.jsx)(n.code,{children:"_float()"})})," method provides a convenient way to convert into\nfloating point number."]}),"\n",(0,t.jsxs)(e,{children:[(0,t.jsx)(n.pre,{language:"js",code:'"20.408".tools._float()             // returns float 20.408.\n"20.408".tools._float(precision=2)  // returns float 20.40.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-string-expression)">&quot;20.408&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._float</span><span style="color: var(--shiki-color-text)">()             </span><span style="color: var(--shiki-token-comment)">// returns float 20.408.</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;20.408&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._float</span><span style="color: var(--shiki-color-text)">(precision</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns float 20.40.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(n.pre,{language:"js",code:'tools._float("20.408")              // returns float 20.408.\ntools._float("20.408", precision=2) // returns float 20.40.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._float</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;20.408&quot;</span><span style="color: var(--shiki-color-text)">)              </span><span style="color: var(--shiki-token-comment)">// returns float 20.408.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._float</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;20.408&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> precision</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// returns float 20.40.</span></span>\n<span></span>'}),title:"Function"})]}),"\n",(0,t.jsx)(n.h2,{id:"integer",children:"Integer"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/cast#int",children:(0,t.jsx)(n.code,{children:"_int()"})}),"  method provides a convenient way to convert into\ninteger values."]}),"\n",(0,t.jsxs)(e,{children:[(0,t.jsx)(n.pre,{language:"js",code:'"201".tools._int() // returns integer 201.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-string-expression)">&quot;201&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._int</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns integer 201.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(n.pre,{language:"js",code:'tools._int("201")  // returns integer 201.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._int</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;201&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns integer 201.</span></span>\n<span></span>'}),title:"Function"})]}),"\n",(0,t.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/cast#str",children:(0,t.jsx)(n.code,{children:"_str()"})}),"  method provides a convenient way to convert a value to it's string representation.\nThe method works with string, boolean, float, integer, and color object types. If a color\nvalue is passed, the method converts it to the color's RGBT values and returns those\nvalues as a string separated by pipes (\"|\"). There is also a convenient method\n",(0,t.jsx)(n.a,{href:"/cast#color-to-string",children:(0,t.jsx)(n.code,{children:"_colorToString()"})})," which basically does the same thing."]}),"\n",(0,t.jsxs)(e,{children:[(0,t.jsx)(n.pre,{language:"js",code:'true.tools._str()                             // returns the string "true".\n20.408.tools._str()                           // returns the string "20.408".\n201.tools._str()                              // returns the string "201".\n#FFFFFF.tools._str()                          // returns the string "255|255|255|0".\ncolor.new(#FFFFFF, 0).tools._str()            // returns the string "255|255|255|0".\n#FFFFFF.tools._colorToString()                // (alternative) returns the string "255|255|255|0".\ncolor.new(#FFFFFF, 0).tools._colorToString()  // (alternative) returns the string "255|255|255|0".\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">()                             </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">20.408</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">()                           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;20.408&quot;.</span></span>\n<span><span style="color: var(--shiki-color-text)">201.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">()                              </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;201&quot;.</span></span>\n<span><span style="color: var(--shiki-color-text)">#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">()                          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">()            </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-color-text)">#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorToString</span><span style="color: var(--shiki-color-text)">()                </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorToString</span><span style="color: var(--shiki-color-text)">()  </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the string &quot;255|255|255|0&quot;.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(n.pre,{language:"js",code:'tools._str(true)                              // returns the string "true".\ntools._str(20.408)                            // returns the string "20.408".\ntools._str(201)                               // returns the string "201".\ntools._str(#FFFFFF)                           // returns the string "255|255|255|0".\ntools._str(color.new(#FFFFFF, 0))             // returns the string "255|255|255|0".\ntools._colorToString(#FFFFFF)                 // (alternative) returns the string "255|255|255|0".\ntools._colorToString(color.new(#FFFFFF, 0))   // (alternative) returns the string "255|255|255|0".\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)                              </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">20.408</span><span style="color: var(--shiki-color-text)">)                            </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;20.408&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">201</span><span style="color: var(--shiki-color-text)">)                               </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;201&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-color-text)">)                           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._str</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">))             </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorToString</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-color-text)">)                 </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the string &quot;255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorToString</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FFFFFF</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">))   </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the string &quot;255|255|255|0&quot;.</span></span>\n<span></span>'}),title:"Function"})]}),"\n",(0,t.jsx)(n.h2,{id:"color",children:"Color"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/cast#clr",children:(0,t.jsx)(n.code,{children:"_clr()"})}),' method provides a convenient way to convert a string of RGBT values into a\ncolor ("R|G|B|T"). This method only works with properly converted RGBT strings. There\nis also a convenient method ',(0,t.jsx)(n.a,{href:"/cast#color-from-string",children:(0,t.jsx)(n.code,{children:"_colorFromString()"})})," which basically\ndoes the same thing."]}),"\n",(0,t.jsxs)(e,{children:[(0,t.jsx)(n.pre,{language:"js",code:'"255|255|255|0".tools._clr()              // returns the #FFFFFF color.\n"255|255|255|0".tools._colorFromString()  // (alternative) returns the #FFFFFF color.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-string-expression)">&quot;255|255|255|0&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._clr</span><span style="color: var(--shiki-color-text)">()              </span><span style="color: var(--shiki-token-comment)">// returns the #FFFFFF color.</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">&quot;255|255|255|0&quot;</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorFromString</span><span style="color: var(--shiki-color-text)">()  </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the #FFFFFF color.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(n.pre,{language:"js",code:'tools._clr("255|255|255|0")               // returns the #FFFFFF color.\ntools._colorFromString("255|255|255|0")   // (alternative) returns the #FFFFFF color.\n',children:(0,t.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._clr</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;255|255|255|0&quot;</span><span style="color: var(--shiki-color-text)">)               </span><span style="color: var(--shiki-token-comment)">// returns the #FFFFFF color.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colorFromString</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;255|255|255|0&quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// (alternative) returns the #FFFFFF color.</span></span>\n<span></span>'}),title:"Function"})]})]})}var r=!0;function l(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),s.components);return n?(0,t.jsx)(n,Object.assign({},s,{children:(0,t.jsx)(e,s)})):e(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=6896)}),_N_E=s.O()}]);