// Â© faiyaz7283

//@version=5

// @description A library of many helper methods, plus a comprehensive print method and a printer object.
library("tools", overlay=true)

// { Type: get the type values for data objects.

// @function *HACK* bypass arg use.
__type(this) => not na(this) ? true : true

// @function    Get the type of an object.
// @param this  The object to inspect.
// @returns     (string) The string representation of the object type.
export method _type(string this) =>
    if __type(this)
        "string"

export method _type(array<string> this) =>
    if __type(this)
        "array<string>"

export method _type(matrix<string> this) =>
    if __type(this)
        "matrix<string>"

export method _type(float this) =>
    if __type(this)
        "float"

export method _type(array<float> this) =>
    if __type(this)
        "array<float>"

export method _type(matrix<float> this) =>
    if __type(this)
        "matrix<float>"

export method _type(int this) =>
    if __type(this)
        "int"

export method _type(array<int> this) =>
    if __type(this)
        "array<int>"

export method _type(matrix<int> this) =>
    if __type(this)
        "matrix<int>"

export method _type(bool this) =>
    if __type(this)
        "bool"

export method _type(array<bool> this) =>
    if __type(this)
        "array<bool>"

export method _type(matrix<bool> this) =>
    if __type(this)
        "matrix<bool>"

export method _type(color this) =>
    if __type(this)
        "color"

export method _type(array<color> this) =>
    if __type(this)
        "array<color>"

export method _type(matrix<color> this) =>
    if __type(this)
        "matrix<color>"

export method _type(box this) =>
    if __type(this)
        "box"

export method _type(array<box> this) =>
    if __type(this)
        "array<box>"

export method _type(matrix<box> this) =>
    if __type(this)
        "matrix<box>"

export method _type(label this) =>
    if __type(this)
        "label"

export method _type(array<label> this) =>
    if __type(this)
        "array<label>"

export method _type(matrix<label> this) =>
    if __type(this)
        "matrix<label>"

export method _type(line this) =>
    if __type(this)
        "line"

export method _type(array<line> this) =>
    if __type(this)
        "array<line>"

export method _type(matrix<line> this) =>
    if __type(this)
        "matrix<line>"

export method _type(linefill this) =>
    if __type(this)
        "linefill"

export method _type(array<linefill> this) =>
    if __type(this)
        "array<linefill>"

export method _type(matrix<linefill> this) =>
    if __type(this)
        "matrix<linefill>"

export method _type(table this) =>
    if __type(this)
        "table"

export method _type(array<table> this) =>
    if __type(this)
        "array<table>"

export method _type(matrix<table> this) =>
    if __type(this)
        "matrix<table>"

// }

// { Casting: cast data from one type to another.

// @function    Casting to a boolean.
// @param this  The casting object.
// @returns     (bool) A boolean value.
export method _bool(bool this) => this

export method _bool(string this) => (str.lower(this) == "true") or ((this != "") and (str.lower(this) != "nan") and (str.lower(this) != "no") and (str.lower(this) != "na") and (this != "0") and (this != "0.0") and (str.lower(this) != "false"))

export method _bool(float this) => not na(this) and this != 0

export method _bool(int this) => not na(this) and this != 0

// @function        Cast to a float.
// @param this      The casting object.
// @param precision (int) A precision value for decimal point.
// @returns         (float) A floating point number.
export method _float(bool this) => float(this ? 1 : 0)

export method _float(string this) => str.tonumber(this)

export method _float(string this, int precision) => math.round(str.tonumber(this), precision)

export method _float(float this) => this

export method _float(float this, int precision) => math.round(this, precision)

export method _float(int this) => float(this) 

export method _float(int this, int precision) => math.round(float(this), precision) 

// @function    Cast to an integer.
// @param this  The casting object.
// @returns     (int) An integer number.
export method _int(bool this) => int(this ? 1 : 0)

export method _int(string this) => int(str.tonumber(this))

export method _int(float this) => int(this)

export method _int(int this) => this

// @function    Cast to a string using the color's RGBT values (separated by "|").
// @param this  (color) A color object.
// @returns     (string) A color string.
export method _colorToString(color this) =>
    not na(this) ? str.format("{0}|{1}|{2}|{3}", color.r(this), color.g(this), color.b(this), color.t(this)) : na
    
// @function    Cast to a color using the string's RGBT values (separated by "|").
// @param this  (string) A string of RGBT values split by '|'.
// @returns     (color) A color object.
export method _colorFromString(string this) =>
    color result = na
    _rgbt = str.split(this, "|") 
    if _rgbt.size() == 4
        result := color.rgb(
          _float(array.get(_rgbt, 0)), 
          _float(array.get(_rgbt, 1)), 
          _float(array.get(_rgbt, 2)), 
          _float(array.get(_rgbt, 3)))
    result

// @function    Cast to a string.
// @param this  The casting object.
// @returns     (string) A string value.
export method _str(bool this) => str.tostring(this)

export method _str(string this) => str.tostring(this)

export method _str(float this) => str.tostring(this)
    
export method _str(int this) => str.tostring(this)   

export method _str(color this) => _colorToString(this) 

// @function    Cast to a color using the string's RGBT values (separated by "|").
// @param this  (string) The casting string object.
// @returns     (color) A color object.
export method _clr(string this) => _colorFromString(this) 

// }

// { Array and String: methods and functions related to array and string object.

// @function *HACK* Helper function for _join.
// Integers and floats get weird formats when using the native 'array.join'.
// Also boolean arrays are not supported with native 'array.join'.
// This is a hack due to the above issues.
__join(this, sep) =>
    new_arr = array.new_string()
    for arr in this
        array.push(new_arr, _str(arr))
    array.join(new_arr, sep)

// @function    Convert an array to a string using the given separator.
// @param this  The array object to join.
// @param sep   (string) A separator. (`,` is used if no argument is supplied).
// @returns     (string) A string joined from an array.
export method _join(array<string> this, string sep=",") => array.join(this, sep)

export method _join(array<int> this, string sep=",") => __join(this, sep)
    
export method _join(array<float> this, string sep=",") => __join(this, sep)
    
export method _join(array<bool> this, string sep=",") => __join(this, sep)

export method _join(array<color> this, string sep=",") => __join(this, sep)

// @function    Split a string by comma.
// @param this  (string) A comma separated string.
// @returns     (array<string>) A string array.
export method _commaSplit(string this) => str.split(this, ",") 

// @function    Split a string by comma.
// @param this  (string) A comma separated string.
// @param idx   (int) The index location of a value.
// @returns     (string) A string.
export method _commaSplit(string this, int idx) =>
    items  = _commaSplit(this)
    idx < array.size(items) ? array.get(items, idx) : ""

// @function    Get the first pair of values as tuple from a comma separated string.
// @param this  (string) A comma separated string.
// @returns     ([string, string]) A tuple consisting of the first two items from a comma separated string.
export method _commaSplitPair(string this) =>
    items = _commaSplit(this)
    v0    = array.get(items, 0)
    v1    = array.size(items) >= 2 ? array.get(items, 1) : ""
    [v0,v1]

// @function    Get all items, except the first, as an array from a comma separated string.
// @param this  (string) A comma separated string.
// @returns     (array<string>) A string array.
export method _commaSplitShift(string this) =>
    items = _commaSplit(this)
    array.shift(items)
    items

// @function    Split a string by pipe.
// @param this  (string) A pipe separated string.
// @returns     (array<string>) A string array.
export method _pipeSplit(string this) => str.split(this, "|") 

// @function    Split a string by pipe.
// @param this  (string) A pipe separated string.
// @param idx   (int) The index location of a value.
// @returns     (string) A string.
export method _pipeSplit(string this, int idx) =>
    items  = _pipeSplit(this)
    idx < array.size(items) ? array.get(items, idx) : ""

// @function    Get the first pair of values as tuple from a pipe separated string.
// @param this  (string) A pipe separated string.
// @returns     ([string, string]) A tuple consisting of the first two items from a pipe separated string.
export method _pipeSplitPair(string this) =>
    items = _pipeSplit(this)
    v0    = array.get(items, 0)
    v1    = array.size(items) >= 2 ? array.get(items, 1) : ""
    [v0,v1]

// @function    Get all items, except the first, as an array from a pipe separated string.
// @param this  (string) A pipe separated string.
// @returns     (array<string>) A string array.
export method _pipeSplitShift(string this) =>
    items = _pipeSplit(this)
    array.shift(items)
    items

// @function    Split a string by colon.
// @param this  (string) A colon separated string.
// @returns     (array<string>) A string array.
export method _colonSplit(string this) => str.split(this, ":") 

// @function    Split a string by colon.
// @param this  (string) A colon separated string.
// @param idx   (int) The index location of a value.
// @returns     (string) A string.
export method _colonSplit(string this, int idx) =>
    items  = _colonSplit(this)
    idx < array.size(items) ? array.get(items, idx) : ""

// @function    Get the first pair of values as tuple from a colon separated string.
// @param this   (string) A colon separated string.
// @returns     ([string, string]) A tuple consisting of the first two items from a colon separated string.
export method _colonSplitPair(string this) =>
    items = _colonSplit(this)
    v0    = array.get(items, 0)
    v1    = array.size(items) >= 2 ? array.get(items, 1) : ""
    [v0,v1]
    
// @function    Get all items, except the first, as an array from a colon separated string.
// @param this  (string) A colon separated string.
// @returns     (array<string>) A string array.
export method _colonSplitShift(string this) =>
    items = _colonSplit(this)
    array.shift(items)
    items

// }

// { Random generators: generate random objects.

// @function Helper function for random number generator.
__rndmNum(min, max) =>
    math.random(min, max)

// @function Helper function for character generator.
__char(num) =>
    string character = switch num
        1  => "a"
        2  => "b"
        3  => "c"
        4  => "d"
        5  => "e"
        6  => "f"
        7  => "g"
        8  => "h"
        9  => "i"
        10 => "j"
        11 => "k"
        12 => "l"
        13 => "m"
        14 => "n"
        15 => "o"
        16 => "p"
        17 => "q"
        18 => "r"
        19 => "s"
        20 => "t"
        21 => "u"
        22 => "v"
        23 => "w"
        24 => "x"
        25 => "y"
        26 => "z"
    character

// @function Random character generator.
// @returns  (string) Random character a-z. 
export _rndmChar() =>
    num = _int(__rndmNum(1, 26))
    __char(num)
    
// @function    Random string generator.
// @param len   (int) Total length of the string. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns     (string) Random string. 
export _rndmString(int len=0) =>
    _len = len <= 0 ? _int(__rndmNum(3, 10)) : len
    str = ""
    for i=0 to _len - 1
        str += _rndmChar()
    str

// @function    Random word generator.
// @param len   (int) Total length of the word. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns     (string) Random word. 
export _rndmWord(int len=0) =>
    _rndmString(len)
    
// @function    Random sentence generator.
// @param len   (int) Total length of the sentence. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns     (string) Random sentence. 
export _rndmSentence(int len=0) =>
    _len    = len <= 0 ? _int(__rndmNum(3, 10)) : len
    sentence = array.new_string()
    for i=0 to _len - 1
        array.push(sentence, _rndmString())
    _join(sentence, " ")

// @function Random boolean generator.
// @returns  (bool) Random boolean value. 
export _rndmBool() =>
    _int(__rndmNum(0, 2)) > 0 ? true : false

// @function        Random float number generator.
// @param min       (float) Minimum float value. (`0` is used if no argument is supplied).
// @param max       (float) Maximum float value. (`100` is used if no argument is supplied).
// @param precision (int) Decimal places. (`2` is used if no argument is supplied).
// @returns         (float) A random float value.
export _rndmFloat(float min=0, float max=100, int precision=2) =>
    rndm_num   = math.round(__rndmNum(min, max), precision)
    _float(rndm_num)
    
// @function        Random integer number generator.
// @param min       (int) Minimum integer value. (`1` is used if no argument is supplied).
// @param max       (int) Maximum integer value. (`100` is used if no argument is supplied).
// @returns         (int) A random integer value.
export _rndmInt(int min=1, int max=100) =>
    _int(__rndmNum(min, max))

// @function        Random color generator.
// @param transp    (bool) Set it to true, to use random transparency value. (`false` is used if no argument is supplied). 
// @returns         (color) Random color value. 
export _rndmColor(bool transp = false) =>
    r = _int(__rndmNum(0, 255))
    g = _int(__rndmNum(0, 255))
    b = _int(__rndmNum(0, 255))
    t = transp ? _int(__rndmNum(1, 100)) : 0
    color.rgb(r, g, b, t)

// @function        Random UNIX timestamp generator.
// @param year      (int) Set a custom year, instead of random value. (`0` is used if no argument is supplied). 
// @param month     (int) Set a custom month, instead of random value. (`0` is used if no argument is supplied). 
// @param day       (int) Set a custom day, instead of random value. (`0` is used if no argument is supplied). 
// @param hour      (int) Set a custom hour, instead of random value. (`0` is used if no argument is supplied). 
// @param minute    (int) Set a custom minute, instead of random value. (`0` is used if no argument is supplied). 
// @param second    (int) Set a custom second, instead of random value. (`0` is used if no argument is supplied). 
// @returns         (int) Random UNIX timestamp. 
export _rndmTimestamp(int year=0, int month=0, int day=0, int hour=0, int minute=0, int second=0) =>
    _crntT = timenow
    _crntYr = year(_crntT)
    _crntMn = month(_crntT)
    _crntDy = dayofmonth(_crntT)
    _year = year == 0 ? _int(__rndmNum(1970, _crntYr)) : year
    _mMax = _year == _crntYr ? _crntMn : 12
    _month = month == 0 ? _int(__rndmNum(1, _mMax)) : month
    _dMax = 30
    if _month == 2
        _dMax := _year % 4 == 0 ? 29 : 28
    else if array.includes(array.from(1,3,5,7,8,10,12), _month)
        _dMax := 31
    
    _dMax := _year == _crntYr and _month == _crntMn ? _crntDy : _dMax
    
    _day = day == 0 ? _int(__rndmNum(1, _dMax)) : day
    _hour = hour == 0 ? _int(__rndmNum(0, 23)) : hour
    _minute = minute == 0 ? _int(__rndmNum(0, 59)) : minute
    _second = second == 0 ? _int(__rndmNum(0, 59)) : second

    timestamp(_year, _month, _day, _hour, _minute, _second)

// @function        Random string array generator.
// @param size      (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param len       (int) Total length of each string. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns         (array<string>) An array of random strings.
export _rndmStringArray(int size=0, int len=0) =>
    _size   = size <= 0 ? _int(__rndmNum(3, 10)) : size
    str_arr = array.new_string()
    for i=0 to _size - 1
        val = len == 0 ? _rndmWord() : (len == 1 ? _rndmChar() : _rndmWord(len))
        array.push(str_arr, val)
    str_arr

// @function    Random character array generator.
// @param size  (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns     (array<string>) An array of random characters.
export _rndmCharArray(int size=0) =>
    _rndmStringArray(size, len=1)
    
// @function        Random float array generator.
// @param size      (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param min       (float) Minimum float value. (`0` is used if no argument is supplied).
// @param max       (float) Maximum float value. (`100` is used if no argument is supplied).
// @param precision (int) Decimal places. (`2` is used if no argument is supplied).
// @returns         (array<float>) An array of random float numbers.
export _rndmFloatArray(int size=0, float min=0, float max=100, int precision=2) =>
    _size    = size <= 0 ? _int(__rndmNum(3, 10)) : size
    float_arr = array.new_float()
    for i=0 to _size - 1
        array.push(float_arr, _rndmFloat(min, max, precision))
    float_arr
    
// @function        Random integer array generator.
// @param size      (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param min       (int) Minimum float value. (`1` is used if no argument is supplied).
// @param max       (int) Maximum float value. (`100` is used if no argument is supplied).
// @param precision (int) Decimal places. (`2` is used if no argument is supplied).
// @returns         (array<int>) An array of random integer numbers.
export _rndmIntArray(int size=0, int min=1, int max=100) =>
    _size  = size <= 0 ? _int(__rndmNum(3, 10)) : size
    int_arr = array.new_int()
    for i=0 to _size - 1
        array.push(int_arr, _rndmInt(min, max))
    int_arr

// @function    Random boolean array generator.
// @param size  (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns     (array<bool>) An array of random boolean values.
export _rndmBoolArray(int size=0) =>
    _size   = size <= 0 ? _int(__rndmNum(3, 10)) : size
    bool_arr = array.new_bool()
    for i=0 to _size - 1
        array.push(bool_arr, _rndmBool())
    bool_arr

// @function        Random color array generator.
// @param size      (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param transp    (bool) Set it to true, to use random transparency values. (`false` is used if no argument is supplied). 
// @returns         (array<color>) An array of random colors.
export _rndmColorArray(int size=0, bool transp=false) =>
    _size   = size <= 0 ? _int(__rndmNum(3, 10)) : size
    color_arr = array.new_color()
    for i=0 to _size - 1
        array.push(color_arr, _rndmColor(transp))
    color_arr

// @function        Random UNIX timestamp array generator.
// @param size      (int) Total size of the array. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param year      (int) Set a custom year, instead of random values. (`0` is used if no argument is supplied). 
// @param month     (int) Set a custom month, instead of random values. (`0` is used if no argument is supplied). 
// @param day       (int) Set a custom day, instead of random values. (`0` is used if no argument is supplied). 
// @param hour      (int) Set a custom hour, instead of random values. (`0` is used if no argument is supplied). 
// @param minute    (int) Set a custom minute, instead of random values. (`0` is used if no argument is supplied). 
// @param second    (int) Set a custom second, instead of random values. (`0` is used if no argument is supplied). 
// @returns         (array<int>) An array of random UNIX timestamps.
export _rndmTimestampArray(int size=0, int year=0, int month=0, int day=0, int hour=0, int minute=0, int second=0) =>
    _size   = size <= 0 ? _int(__rndmNum(3, 10)) : size
    timestamp_arr = array.new_int()
    for i=0 to _size - 1
        array.push(timestamp_arr, _rndmTimestamp(year, month, day, hour, minute, second))
    timestamp_arr

// @function        Random string matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param len       (int) Total sizeof each word. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns         (matrix<string>) A matrix of random strings.
export _rndmStringMatrix(int rows=0, int columns=0, int len=0) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<string>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            val = len == 0 ? _rndmWord() : (len == 1 ? _rndmChar() : _rndmWord(len))
            _m.set(r, c, val)
    _m

// @function        Random character matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns         (matrix<string>) A matrix of random characters.
export _rndmCharMatrix(int rows=0, int columns=0) =>
    _rndmStringMatrix(rows, columns, len=1)

// @function        Random float matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param min       (float) Minimum float value. (`0` is used if no argument is supplied).
// @param max       (float) Maximum float value. (`100` is used if no argument is supplied).
// @param precision (int) Decimal places. (`2` is used if no argument is supplied).
// @returns         (matrix<float>) A matrix of random float numbers.
export _rndmFloatMatrix(int rows=0, int columns=0, float min=0, float max=100, int precision=2) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<float>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            _m.set(r, c, _rndmFloat(min, max, precision))
    _m

// @function        Random integer matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param min       (int) Minimum float value. (`0` is used if no argument is supplied).
// @param max       (int) Maximum float value. (`100` is used if no argument is supplied).
// @returns         (matrix<int>) A matrix of random integer numbers.
export _rndmIntMatrix(int rows=0, int columns=0, int min=0, int max=100) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<int>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            _m.set(r, c, _rndmInt(min, max))
    _m

// @function        Random boolean matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @returns         (matrix<bool>) A matrix of random booleans.
export _rndmBoolMatrix(int rows=0, int columns=0) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<bool>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            _m.set(r, c, _rndmBool())
    _m

// @function        Random color matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param transp    (bool) Set it to true, to use random transparency values. (`false` is used if no argument is supplied). 
// @returns         (matrix<color>) A matrix of random colors.
export _rndmColorMatrix(int rows=0, int columns=0, bool transp=false) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<color>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            _m.set(r, c, _rndmColor(transp))
    _m

// @function        Random UNIX timestamp matrix generator.
// @param rows      (int) Total rows. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param columns   (int) Total columns. (`0` is used if no argument is supplied, which implies random value between 3-10).
// @param year      (int) Set a custom year, instead of random values. (`0` is used if no argument is supplied). 
// @param month     (int) Set a custom month, instead of random values. (`0` is used if no argument is supplied). 
// @param day       (int) Set a custom day, instead of random values. (`0` is used if no argument is supplied). 
// @param hour      (int) Set a custom hour, instead of random values. (`0` is used if no argument is supplied). 
// @param minute    (int) Set a custom minute, instead of random values. (`0` is used if no argument is supplied). 
// @param second    (int) Set a custom second, instead of random values. (`0` is used if no argument is supplied). 
// @returns         (matrix<int>) A matrix of random UNIX timestamps.
export _rndmTimestampMatrix(int rows=0, int columns=0, int year=0, int month=0, int day=0, int hour=0, int minute=0, int second=0) =>
    _rows = rows <= 0 ? _int(__rndmNum(3, 10)) : rows
    _cols = columns <= 0 ? _int(__rndmNum(3, 10)) : columns
    _m    = matrix.new<int>(_rows, _cols, na)
    for r=0 to _rows - 1
        for c=0 to _cols - 1
            _m.set(r, c, _rndmTimestamp(year, month, day, hour, minute, second))
    _m

// }

// { Timestamps: Methods and functions to help with timestamps, time, date, etc.

// @function For *INTERNAL* use only.
__getSeconds(string this) =>
	int result = na
	// Calculate in seconds.
	_minute = 60 // 60 seconds in a minute.
	_hour = 60 * _minute // 60 minutes in an hour.
	_day = 24 * _hour // 24 hours in a day.
	_week = 7 * _day // 7 days in a week.
	_month = int(30.44 * _day) // 30.44 days in a month.
	_year = 365 * _day // 365 days in a year.
	if str.lower(this) == 'year' or this == 'y'
		result := _year
	else if str.lower(this) == 'month' or this == 'M'
		result := _month
	else if str.lower(this) == 'week' or this == 'w'
		result := _week
	else if str.lower(this) == 'day' or this == 'd'
		result := _day
	else if str.lower(this) == 'hour' or this == 'h'
		result := _hour
	else if str.lower(this) == 'minute' or this == 'm'
		result := _minute
	result

// @function            Get the total epoch seconds for a single timestamp or calculate the time difference in seconds between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in seconds.
export method _seconds(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
    diffMilliseconds = not na(timestamp2) ? timestamp2 - timestamp1 : timestamp1
	math.abs(diffMilliseconds) / 1000

// @function            Get the total epoch years for a single timestamp or calculate the time difference in years between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in years.
export method _years(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('year')

// @function            Get the total epoch months for a single timestamp or calculate the time difference in months between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in months.
export method _months(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('month')

// @function            Get the total epoch weeks for a single timestamp or calculate the time difference in weeks between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in weeks.
export method _weeks(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('week')

// @function            Get the total epoch days for a single timestamp or calculate the time difference in days between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in days.
export method _days(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('day')

// @function            Get the total epoch hours for a single timestamp or calculate the time difference in hours between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float)The total time difference in hours.
export method _hours(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('hour')

// @function            Get the total epoch minutes for a single timestamp or calculate the time difference in minutes between two timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @returns             (int/float) The total time difference in minutes.
export method _minutes(int timestamp1, int timestamp2=na) =>
	// @function For *INTERNAL* use only.
	diffInSeconds = _seconds(timestamp1, timestamp2)
	diffInSeconds / __getSeconds('minute')

// @function            Get a detailed breakdown of the time difference from the current time or between two UNIX timestamps.
// @param timestamp1    (int) The start time in unix timestamp (milliseconds).
// @param timestamp2    (int) The end time in unix timestamp (milliseconds). (`na` is used if no argument is supplied).
// @param years         (bool) Calculate the total number of years. Use false to omit. (`true` is used if no argument is supplied).
// @param months        (bool) Calculate the total number of months. Use false to omit. (`true` is used if no argument is supplied).
// @param weeks         (bool) Calculate the total number of weeks. Use false to omit. (`true` is used if no argument is supplied).
// @param days          (bool) Calculate the total number of days. Use false to omit. (`true` is used if no argument is supplied).
// @param hours         (bool) Calculate the total number of hours. Use false to omit. (`true` is used if no argument is supplied).
// @param minutes       (bool) Calculate the total number of minutes. Use false to omit. (`true` is used if no argument is supplied).
// @param seconds       (bool) Calculate the total number of seconds. Use false to omit. (`true` is used if no argument is supplied).
// @returns             (string) Complete breakdown of the time difference into various segments.
export method _getTimeDifference(int timestamp1, int timestamp2=na, bool years=true, bool months=true, bool weeks=true, bool days=true, bool hours=true, bool minutes=true, bool seconds=true) =>
    st = timestamp1
    et = not na(timestamp2) ? timestamp2 : timenow

    // If end time is greater, then reverse.
    if et > st
        st := et     
        et := timestamp1

    tt = array.new<string>()
    tt.push("Total: " + _str(st))
    
	msg = array.new<string>()
	if years // Display years:
		yrs = int(_years(st, et))
		if yrs > 0
			msg.push(str.format("{0} {1}", yrs, yrs > 1 ? "years" : "year"))
			// remove the value from seconds
			st := st - (__getSeconds('year') * yrs) * 1000
            tt.push("-yrs: " + _str(st))
	if months // Display months:
		mnths = int(_months(st, et))
		if mnths > 0
			msg.push(str.format("{0} {1}", mnths, mnths > 1 ? "months" : "month"))
			// remove the value from seconds
			st := st - (__getSeconds('month') * mnths) * 1000
            tt.push("-mnths: " + _str(st))
	if weeks // Display weeks:
		wks = int(_weeks(st, et))
		if wks > 0
			msg.push(str.format("{0} {1}", wks, wks > 1 ? "weeks" : "week"))
			// remove the value from seconds
			st := st - (__getSeconds('week') * wks) * 1000
            tt.push("-wks: " + _str(st))
	if days // Display days:
		dys = int(_days(st, et))
		if dys > 0
			msg.push(str.format("{0} {1}", dys, dys > 1 ? "days" : "day"))
			// remove the value from seconds
			st := st - (__getSeconds('day') * dys) * 1000
            tt.push("-dys: " + _str(st))
	if hours // Display hours:
		hrs = int(_hours(st, et))
		if hrs > 0
			msg.push(str.format("{0} {1}", hrs, hrs > 1 ? "hours" : "hour"))
			// remove the value from seconds
			st := st - (__getSeconds('hour') * hrs) * 1000
            tt.push("-hrs: " + _str(st))
	if minutes // Display minutes:
		mnts = int(_minutes(st, et))
		if mnts > 0
			msg.push(str.format("{0} {1}", mnts, mnts > 1 ? "minutes" : "minute"))
			// remove the value from seconds
			st := st - (__getSeconds('minute') * mnts) * 1000
            tt.push("-mnts: " + _str(st))
	if seconds // Display seconds:
		scnds = int(_seconds(st, et))
		if scnds > 0
			msg.push(str.format("{0} {1}", scnds, scnds > 1 ? "seconds" : "second"))
			// remove the value from seconds
			st := st - (__getSeconds('second') * scnds) * 1000
            tt.push("-scnds: " + _str(st))
    
    // runtime.error(tt._join(', '))
	if msg.size() > 1
		lastItem = msg.pop()
		msg.push("and " + lastItem)
	msg._join(', ')

// }

// { Colors: Methods and functions related to colors, and gradients.

// @function        Get custom preset color.
// @param this      (string) A string value.
// @param transp    (float) A transparency value. (`0` is used if no argument is supplied). 
// @returns         (color) A custom preset color value based on constant name.
export method _color(string this, float transp=0) =>
    color result = na
    _cl = switch this
        "aqua_bright"   => #00FFFF
        "aqua_light"    => #00C8FF
        "aqua_medium"   => #0096FF
        "aqua_dark"     => #0078FF
        "black_bright"  => #191919
        "black_light"   => #0A0A0A
        "black_medium"  => #050505
        "black_dark"    => #000000
        "blue_bright"   => #0000FF
        "blue_light"    => #0000C8
        "blue_medium"   => #000096
        "blue_dark"     => #000078
        "gray_bright"   => #3C4650
        "gray_light"    => #2D3741
        "gray_medium"   => #1E2832
        "gray_dark"     => #0F1923
        "green_bright"  => #00FF00
        "green_light"   => #00C800
        "green_medium"  => #009600
        "green_dark"    => #007800
        "orange_bright" => #FF6400
        "orange_light"  => #F55A00
        "orange_medium" => #EB5000
        "orange_dark"   => #E14600
        "pink_bright"   => #FF96FF
        "pink_light"    => #FF64FF
        "pink_medium"   => #FF32FF
        "pink_dark"     => #FF00FF
        "purple_bright" => #9696FF
        "purple_light"  => #9664FF
        "purple_medium" => #9632FF
        "purple_dark"   => #9600FF
        "red_bright"    => #FF0000
        "red_light"     => #C80000
        "red_medium"    => #960000
        "red_dark"      => #780000
        "white_bright"  => #FFFFFF
        "white_light"   => #EBEBEB
        "white_medium"  => #D7D7D7
        "white_dark"    => #C8C8C8
        "yellow_bright" => #FFFF00
        "yellow_light"  => #E6E600
        "yellow_medium" => #D2D200
        "yellow_dark"   => #AFAF00
        => na                      
    if not na(_cl)                   
    	result := color.new(_cl, transp)
	result

// Define the `_gradient` UDT.
export type _gradient
    float max
    float min
    float mid = 0
    color up = #00FF00
    color neutral = #fff9c4
    color down = #FF0000
    color offsetColor = #000000
    string offsetItem = 'text'

// @function    Get the gradient color for given number.
// @param this	(_gradient) A `_gradient` object.
// @param num   (float) A number value.
// @returns  	(color) The gradient color.
export method _color(_gradient this, float num) =>
    bottom_value = num > 0 ? this.mid : this.min
    top_value = num > 0 ? this.max : this.mid
    bottom_color = num > 0 ? this.neutral : this.down
    top_color = num > 0 ? this.up : this.neutral
    num == 0 ? this.neutral : color.from_gradient(num, bottom_value, top_value, bottom_color, top_color)
//}

// { Misc : Miscellaneous functions

export method numCompact(float num) =>
    string result = na
    thousand    = 1000
    million     = thousand * thousand
    billion     = million  * thousand
    trillion    = billion  * thousand
    quadrillion = trillion * thousand
    
    if num < million
        result := str.format("{0,number,0.000}", (nz(num) / thousand))    + "K"
    else if num >= million and num < billion
        result := str.format("{0,number,0.000}", (nz(num) / million))     + "M"
    else if num >= billion and num < trillion
        result := str.format("{0,number,0.000}", (nz(num) / billion))     + "B"
    else if num >= trillion and num < quadrillion
        result := str.format("{0,number,0.000}", (nz(num) / trillion))    + "T"
    else
        result := str.format("{0,number,0.000}", (nz(num) / quadrillion)) + "Q"
    result

// }
