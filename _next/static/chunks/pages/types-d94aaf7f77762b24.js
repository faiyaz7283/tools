(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[667],{7769:function(n,s,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/types",function(){return o(2884)}])},2884:function(n,s,o){"use strict";o.r(s),o.d(s,{__N_SSG:function(){return e}});var t=o(5893),a=o(1151);function r(n){let s=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre"},(0,a.ah)(),n.components),{Note:o,CodeGroup:r}=s;return r||l("CodeGroup",!0),o||l("Note",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{children:"Inspect data types."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.a,{href:"/type#type",children:(0,t.jsx)(s.code,{children:"_type()"})})," is a versatile method that can be used to inspect object type. This method is particularly useful for scripts that rely on\nthe type to return a certain value or perform a specific task. The ",(0,t.jsx)(s.a,{href:"/type#type",children:(0,t.jsx)(s.code,{children:"_type()"})})," method supports a wide range of data types, including ",(0,t.jsx)(s.code,{children:"string"}),",\n",(0,t.jsx)(s.code,{children:"integer"}),", ",(0,t.jsx)(s.code,{children:"boolean"}),", ",(0,t.jsx)(s.code,{children:"float"}),", ",(0,t.jsx)(s.code,{children:"color"}),", ",(0,t.jsx)(s.code,{children:"table"}),", ",(0,t.jsx)(s.code,{children:"line"}),", ",(0,t.jsx)(s.code,{children:"label"}),", ",(0,t.jsx)(s.code,{children:"box"}),", ",(0,t.jsx)(s.code,{children:"linefill"}),", ",(0,t.jsx)(s.code,{children:"array<type>"}),", and ",(0,t.jsx)(s.code,{children:"matrix<type>"}),". By leveraging the ",(0,t.jsx)(s.a,{href:"/type#type",children:(0,t.jsx)(s.code,{children:"_type()"})}),"\nmethod, Pinescript users can create more robust and flexible scripts that can adapt to a wide range of data inputs."]}),"\n",(0,t.jsx)(o,{children:(0,t.jsxs)(s.p,{children:["For all the examples in this page, ",(0,t.jsx)(s.code,{children:"tl"})," is used as a namespace for the tools library.\nIf you are following along with the examples, please make sure to import the latest\nversion of the library in your script first, and assign ",(0,t.jsx)(s.code,{children:"tl"})," as namespace."]})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(s.pre,{language:"js",code:'// Example testing object types \n\nvarStr = "Hello"\nvarStr.tl._type() // returns "string"\n\nvarFlt = 1.25\nvarFlt.tl._type() // returns "float"\n\nint varInt = 100\nvarInt.tl._type() // returns "int"\n\nbool varBool = true\nvarBool.tl._type() // returns "bool"\n\ncolor varClr = color.red\nvarClr.tl._type() // returns "color"\n\ntable varTbl = table.new(position, col, row)\nvarTbl.tl._type() // returns "table"\n\narray<string> varArrS = array.new_string(5,na)\nvarArrS.tl._type() // returns "array<string>"\n\nmatrix<float> varMtxF = matrix.new<float>(4,4,0.5)\nvarMtxF.tl._type() // returns "matrix<float>"\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Example testing object types </span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">varStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Hello&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">varStr</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;string&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">varFlt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.25</span></span>\n<span><span style="color: var(--shiki-token-constant)">varFlt</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;float&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">int varInt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span></span>\n<span><span style="color: var(--shiki-token-constant)">varInt</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;int&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">bool varBool </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-token-constant)">varBool</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;bool&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">color varClr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.red</span></span>\n<span><span style="color: var(--shiki-token-constant)">varClr</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;color&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">table varTbl </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">table</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(position</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> col</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> row)</span></span>\n<span><span style="color: var(--shiki-token-constant)">varTbl</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;table&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">array</span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">string</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> varArrS </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.new_string</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">na)</span></span>\n<span><span style="color: var(--shiki-token-constant)">varArrS</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;array&lt;string&gt;&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">matrix</span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">float</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> varMtxF </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">matrix</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">float</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">0.5</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">varMtxF</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns &quot;matrix&lt;float&gt;&quot;</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(s.pre,{language:"js",code:'// Example testing object types \n\nvarStr = "Hello"\ntl._type(varStr) // returns "string"\n\nvarFlt = 1.25\ntl._type(varFlt) // returns "float"\n\nint varInt = 100\ntl._type(varInt) // returns "int"\n\nbool varBool = true\ntl._type(varBool) // returns "bool"\n\ncolor varClr = color.red\ntl._type(varClr) // returns "color"\n\ntable varTbl = table.new(position, col, row)\ntl._type(varTbl) // returns "table"\n\narray<string> varArrS = array.new_string(5,na)\ntl._type(varArrS) // returns "array<string>"\n\nmatrix<float> varMtxF = matrix.new<float>(4,4,0.5)\ntl._type(varMtxF) // returns "matrix<float>"\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Example testing object types </span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">varStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Hello&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varStr) </span><span style="color: var(--shiki-token-comment)">// returns &quot;string&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">varFlt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.25</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varFlt) </span><span style="color: var(--shiki-token-comment)">// returns &quot;float&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">int varInt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varInt) </span><span style="color: var(--shiki-token-comment)">// returns &quot;int&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">bool varBool </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varBool) </span><span style="color: var(--shiki-token-comment)">// returns &quot;bool&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">color varClr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.red</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varClr) </span><span style="color: var(--shiki-token-comment)">// returns &quot;color&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">table varTbl </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">table</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">(position</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> col</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> row)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varTbl) </span><span style="color: var(--shiki-token-comment)">// returns &quot;table&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">array</span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">string</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> varArrS </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.new_string</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">na)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varArrS) </span><span style="color: var(--shiki-token-comment)">// returns &quot;array&lt;string&gt;&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">matrix</span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">float</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> varMtxF </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">matrix</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">float</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">0.5</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tl</span><span style="color: var(--shiki-token-function)">._type</span><span style="color: var(--shiki-color-text)">(varMtxF) </span><span style="color: var(--shiki-token-comment)">// returns &quot;matrix&lt;float&gt;&quot;</span></span>\n<span></span>'}),title:"Function"})]})]})}var e=!0;function l(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,t.jsx)(s,Object.assign({},n,{children:(0,t.jsx)(r,n)})):r(n)}}},function(n){n.O(0,[774,888,179],function(){return n(n.s=7769)}),_N_E=n.O()}]);