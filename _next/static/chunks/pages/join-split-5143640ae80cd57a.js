(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[803],{6779:function(n,s,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/join-split",function(){return o(1696)}])},1696:function(n,s,o){"use strict";o.r(s),o.d(s,{__N_SSG:function(){return e}});var t=o(5893),a=o(1151);function r(n){let s=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",ul:"ul",li:"li"},(0,a.ah)(),n.components),{Note:o,CodeGroup:r}=s;return r||i("CodeGroup",!0),o||i("Note",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{children:"Join and split"}),"\n",(0,t.jsxs)(s.p,{children:["The tools library provides some custom array and string methods that expand Pinescript's own ",(0,t.jsx)(s.code,{children:"array.join()"})," and ",(0,t.jsx)(s.code,{children:"str.split()"})," methods."]}),"\n",(0,t.jsxs)(o,{children:["Please make sure to import the ",(0,t.jsx)(s.a,{href:"https://www.tradingview.com/script/KuDBLIOE-tools",children:(0,t.jsx)(s.code,{children:"tools"})})," library in your script, before following along with the examples."]}),"\n",(0,t.jsx)(s.h2,{id:"join",children:"Join"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.a,{href:"/join-splits#join",children:(0,t.jsx)(s.code,{children:"_join()"})})," method is similar to the Pinescript's ",(0,t.jsx)(s.a,{href:"https://www.tradingview.com/pine-script-reference/v5/#fun_array.join",children:(0,t.jsx)(s.code,{children:"array.join()"})})," method,\nand extends the ability to join boolean and color arrays as well."]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(s.pre,{language:"js",code:'// Joining array<string>\n\nstrArray = array.from("apple", "banana", "carrot")\nstrArray._join()          // returns the string "apple,banana,carrot".\nstrArray._join(sep=" ")   // returns the string "apple banana carrot".\nstrArray._join(sep="-")   // returns the string "apple-banana-carrot".\n\n// Joining array<float>\n\nfltArray = array.from(1.2, 2.1, 3.098, 4.0089)\nfltArray._join()          // returns the string "1.2,2.1,3.098,4.0089".\nfltArray._join(sep=" ")   // returns the string "1.2 2.1 3.098 4.0089".\nfltArray._join(sep="-")   // returns the string "1.2-2.1-3.098-4.0089".\n\n// Joining array<int>\n\nintArray = array.from(1, 2, 3, 4, 5)\nintArray._join()          // returns the string "1,2,3,4,5".\nintArray._join(sep=" ")   // returns the string "1 2 3 4 5".\nintArray._join(sep="-")   // returns the string "1-2-3-4-5".\n\n// Joining array<bool>\n\nboolArray = array.from(true, false, false, true, false)\nboolArray._join()         // returns the string "true,false,false,true,false".\nboolArray._join(sep=" ")  // returns the string "true false false true false".\nboolArray._join(sep="-")  // returns the string "true-false-false-true-false".\n\n// Joining array<color>\n\nclrArray = array.from(color.red, color.black, color.white)\nclrArray._join()          // returns the string "255|82|82|0,54|58|69|0,255|255|255|0".\nclrArray._join(sep=" ")   // returns the string "255|82|82|0 54|58|69|0 255|255|255|0".\nclrArray._join(sep="-")   // returns the string "255|82|82|0-54|58|69|0-255|255|255|0".\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;string&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">strArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;apple&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;banana&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;carrot&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">strArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple,banana,carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">strArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple banana carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">strArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple-banana-carrot&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;float&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">fltArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1.2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2.1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.098</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4.0089</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">fltArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2,2.1,3.098,4.0089&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">fltArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2 2.1 3.098 4.0089&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">fltArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2-2.1-3.098-4.0089&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;int&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">intArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">intArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1,2,3,4,5&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">intArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1 2 3 4 5&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">intArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1-2-3-4-5&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;bool&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">boolArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">boolArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">()         </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true,false,false,true,false&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">boolArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true false false true false&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">boolArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true-false-false-true-false&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;color&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">clrArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.red</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.white)</span></span>\n<span><span style="color: var(--shiki-token-constant)">clrArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0,54|58|69|0,255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">clrArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0 54|58|69|0 255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">clrArray</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0-54|58|69|0-255|255|255|0&quot;.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(s.pre,{language:"js",code:'// Joining array<string>\n\nstrArray = array.from("apple", "banana", "carrot")\ntools._join(strArray)           // returns the string "apple,banana,carrot".\ntools._join(strArray, sep=" ")  // returns the string "apple banana carrot".\ntools._join(strArray, sep="-")  // returns the string "apple-banana-carrot".\n\n// Joining array<float>\n\nfltArray = array.from(1.2, 2.1, 3.098, 4.0089)\ntools._join(fltArray)           // returns the string "1.2,2.1,3.098,4.0089".\ntools._join(fltArray, sep=" ")  // returns the string "1.2 2.1 3.098 4.0089".\ntools._join(fltArray, sep="-")  // returns the string "1.2-2.1-3.098-4.0089".\n\n// Joining array<int>\n\nintArray = array.from(1, 2, 3, 4, 5)\ntools._join(intArray)           // returns the string "1,2,3,4,5".\ntools._join(intArray, sep=" ")  // returns the string "1 2 3 4 5".\ntools._join(intArray, sep="-")  // returns the string "1-2-3-4-5".\n\n// Joining array<bool>\n\nboolArray = array.from(true, false, false, true, false)\ntools._join(boolArray)          // returns the string "true,false,false,true,false".\ntools._join(boolArray, sep=" ") // returns the string "true false false true false".\ntools._join(boolArray, sep="-") // returns the string "true-false-false-true-false".\n\n// Joining array<color>\n\nclrArray = array.from(color.red, color.black, color.white)\ntools._join(clrArray)           // returns the string "255|82|82|0,54|58|69|0,255|255|255|0".\ntools._join(clrArray, sep=" ")  // returns the string "255|82|82|0 54|58|69|0 255|255|255|0".\ntools._join(clrArray, sep="-")  // returns the string "255|82|82|0-54|58|69|0-255|255|255|0".\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;string&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">strArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;apple&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;banana&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;carrot&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(strArray)           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple,banana,carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(strArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple banana carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(strArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;apple-banana-carrot&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;float&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">fltArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1.2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2.1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.098</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4.0089</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(fltArray)           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2,2.1,3.098,4.0089&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(fltArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2 2.1 3.098 4.0089&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(fltArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1.2-2.1-3.098-4.0089&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;int&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">intArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(intArray)           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1,2,3,4,5&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(intArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1 2 3 4 5&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(intArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;1-2-3-4-5&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;bool&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">boolArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(boolArray)          </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true,false,false,true,false&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(boolArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true false false true false&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(boolArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;true-false-false-true-false&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Joining array&lt;color&gt;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">clrArray </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.red</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-color-text)">.white)</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(clrArray)           </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0,54|58|69|0,255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(clrArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0 54|58|69|0 255|255|255|0&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._join</span><span style="color: var(--shiki-color-text)">(clrArray</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sep</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-&quot;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;255|82|82|0-54|58|69|0-255|255|255|0&quot;.</span></span>\n<span></span>'}),title:"Function"})]}),"\n",(0,t.jsx)(s.h2,{id:"split",children:"Split"}),"\n",(0,t.jsxs)(s.p,{children:["The tools library provides several convenient split methods that work similarly to the Pinescript's\n",(0,t.jsx)(s.a,{href:"https://www.tradingview.com/pine-script-reference/v5/#fun_str.split",children:(0,t.jsx)(s.code,{children:"str.split()"})})," method.\nThese methods are named with their separator (comma, pipe or colon) and follow a naming convention:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Split into an array.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#comma-split",children:(0,t.jsx)(s.code,{children:"_commaSplit()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#pipe-split",children:(0,t.jsx)(s.code,{children:"_pipeSplit()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#colon-split",children:(0,t.jsx)(s.code,{children:"_colonSplit()"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["Split and get just a single item.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#comma-split-2",children:(0,t.jsx)(s.code,{children:"_commaSplit()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#pipe-split-2",children:(0,t.jsx)(s.code,{children:"_pipeSplit()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#colon-split-2",children:(0,t.jsx)(s.code,{children:"_colonSplit()"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["Split into a single tuple pair of first two items.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#comma-split-pair",children:(0,t.jsx)(s.code,{children:"_commaSplitPair()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#pipe-split-pair",children:(0,t.jsx)(s.code,{children:"_pipeSplitPair()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#colon-split-pair",children:(0,t.jsx)(s.code,{children:"_colonSplitPair()"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["Split into an array without the first item.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#comma-split-shift",children:(0,t.jsx)(s.code,{children:"_commaSplitShift()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#pipe-split-shift",children:(0,t.jsx)(s.code,{children:"_pipeSplitShift()"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/join-splits#colon-split-shift",children:(0,t.jsx)(s.code,{children:"_colonSplitShift()"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)(s.pre,{language:"js",code:'// Separator: Comma\n\ncommaStr = "apple,banana,carrot"\ncommaStr._commaSplit()        // returns an array<string>("apple", "banana", "carrot").\ncommaStr._commaSplit(idx=2)   // returns the string "carrot".\ncommaStr._commaSplitPair()    // returns a tuple containing ["apple", "banana"].\ncommaStr._commaSplitShift()   // returns an array<string>("banana", "carrot") without "apple".\n\n// Separator: Pipe\n\npipeStr = "apple|banana|carrot"\npipeStr._pipeSplit()          // returns an array<string>("apple", "banana", "carrot").\npipeStr._pipeSplit(idx=2)     // returns the string "carrot".\npipeStr._pipeSplitPair()      // returns a tuple containing ["apple", "banana"].\npipeStr._pipeSplitShift()     // returns an array<string>("banana", "carrot") without "apple".\n\n// Separator: Colon\n\ncolonStr = "apple:banana:carrot"\ncolonStr._colonSplit()        // returns an array<string>("apple", "banana", "carrot").\ncolonStr._colonSplit(idx=2)   // returns the string "carrot".\ncolonStr._colonSplitPair()    // returns a tuple containing ["apple", "banana"].\ncolonStr._colonSplitShift()   // returns an array<string>("banana", "carrot") without "apple".\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Separator: Comma</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">commaStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple,banana,carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">commaStr</span><span style="color: var(--shiki-token-function)">._commaSplit</span><span style="color: var(--shiki-color-text)">()        </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">commaStr</span><span style="color: var(--shiki-token-function)">._commaSplit</span><span style="color: var(--shiki-color-text)">(idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">commaStr</span><span style="color: var(--shiki-token-function)">._commaSplitPair</span><span style="color: var(--shiki-color-text)">()    </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">commaStr</span><span style="color: var(--shiki-token-function)">._commaSplitShift</span><span style="color: var(--shiki-color-text)">()   </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Separator: Pipe</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">pipeStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple|banana|carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">pipeStr</span><span style="color: var(--shiki-token-function)">._pipeSplit</span><span style="color: var(--shiki-color-text)">()          </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">pipeStr</span><span style="color: var(--shiki-token-function)">._pipeSplit</span><span style="color: var(--shiki-color-text)">(idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)     </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">pipeStr</span><span style="color: var(--shiki-token-function)">._pipeSplitPair</span><span style="color: var(--shiki-color-text)">()      </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">pipeStr</span><span style="color: var(--shiki-token-function)">._pipeSplitShift</span><span style="color: var(--shiki-color-text)">()     </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Separator: Colon</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">colonStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple:banana:carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">colonStr</span><span style="color: var(--shiki-token-function)">._colonSplit</span><span style="color: var(--shiki-color-text)">()        </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">colonStr</span><span style="color: var(--shiki-token-function)">._colonSplit</span><span style="color: var(--shiki-color-text)">(idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)   </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">colonStr</span><span style="color: var(--shiki-token-function)">._colonSplitPair</span><span style="color: var(--shiki-color-text)">()    </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">colonStr</span><span style="color: var(--shiki-token-function)">._colonSplitShift</span><span style="color: var(--shiki-color-text)">()   </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>'}),title:"Method"}),(0,t.jsx)(s.pre,{language:"js",code:'// Separator: Comma\n\ncommaStr = "apple,banana,carrot"\ntools._commaSplit(commaStr)         // returns an array<string>("apple", "banana", "carrot").\ntools._commaSplit(commaStr, idx=2)  // returns the string "carrot".\ntools._commaSplitPair(commaStr)     // returns a tuple containing ["apple", "banana"].\ntools._commaSplitShift(commaStr)    // returns an array<string>("banana", "carrot") without "apple".\n\n// Separator: Pipe\n\npipeStr = "apple|banana|carrot"\ntools._pipeSplit(pipeStr)           // returns an array<string>("apple", "banana", "carrot").\ntools._pipeSplit(pipeStr, idx=2)    // returns the string "carrot".\ntools._pipeSplitPair(pipeStr)       // returns a tuple containing ["apple", "banana"].\ntools._pipeSplitShift(pipeStr)      // returns an array<string>("banana", "carrot") without "apple".\n\n// Separator: Colon\n\ncolonStr = "apple:banana:carrot"\ntools._colonSplit(colonStr)         // returns an array<string>("apple", "banana", "carrot").\ntools._colonSplit(colonStr, idx=2)  // returns the string "carrot".\ntools._colonSplitPair(colonStr)     // returns a tuple containing ["apple", "banana"].\ntools._colonSplitShift(colonStr)    // returns an array<string>("banana", "carrot") without "apple".\n',children:(0,t.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Separator: Comma</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">commaStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple,banana,carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._commaSplit</span><span style="color: var(--shiki-color-text)">(commaStr)         </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._commaSplit</span><span style="color: var(--shiki-color-text)">(commaStr</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._commaSplitPair</span><span style="color: var(--shiki-color-text)">(commaStr)     </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._commaSplitShift</span><span style="color: var(--shiki-color-text)">(commaStr)    </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Separator: Pipe</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">pipeStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple|banana|carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._pipeSplit</span><span style="color: var(--shiki-color-text)">(pipeStr)           </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._pipeSplit</span><span style="color: var(--shiki-color-text)">(pipeStr</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)    </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._pipeSplitPair</span><span style="color: var(--shiki-color-text)">(pipeStr)       </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._pipeSplitShift</span><span style="color: var(--shiki-color-text)">(pipeStr)      </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Separator: Colon</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">colonStr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;apple:banana:carrot&quot;</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colonSplit</span><span style="color: var(--shiki-color-text)">(colonStr)         </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;).</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colonSplit</span><span style="color: var(--shiki-color-text)">(colonStr</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> idx</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// returns the string &quot;carrot&quot;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colonSplitPair</span><span style="color: var(--shiki-color-text)">(colonStr)     </span><span style="color: var(--shiki-token-comment)">// returns a tuple containing [&quot;apple&quot;, &quot;banana&quot;].</span></span>\n<span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">._colonSplitShift</span><span style="color: var(--shiki-color-text)">(colonStr)    </span><span style="color: var(--shiki-token-comment)">// returns an array&lt;string&gt;(&quot;banana&quot;, &quot;carrot&quot;) without &quot;apple&quot;.</span></span>\n<span></span>'}),title:"Function"})]})]})}var e=!0;function i(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,t.jsx)(s,Object.assign({},n,{children:(0,t.jsx)(r,n)})):r(n)}}},function(n){n.O(0,[774,888,179],function(){return n(n.s=6779)}),_N_E=n.O()}]);